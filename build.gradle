plugins {
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

javafx {
    version '20'
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    mainClass = 'projetofinal.model.Main'
}


group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'

    implementation 'com.google.http-client:google-http-client-jackson2:1.42.3'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.17.0'
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20220927-2.0.0'

}

tasks.named('test')  {
    useJUnitPlatform()
}

task createInstaller(type: Exec) {
    dependsOn build

    def osName = System.getProperty("os.name").toLowerCase()
    def installerType = project.hasProperty("installerType") ? project.getProperty("installerType") : "app-image"

    if (osName.contains("windows")) {
        installerType = "exe"
    }

    def jarTask = tasks.getByName('jar')
    def fatJarName = jarTask.archiveFileName.get() // ou archiveName

    def outputDir = "$buildDir/installer"

    commandLine 'jpackage',
            '--input', "$buildDir/libs",
            '--name', 'MeuApp',
            '--main-jar', fatJarName,
            '--main-class', application.mainClass.get(),
            '--type', installerType,
            '--dest', outputDir,
            '--app-version', version,
            '--icon', 'src/main/resources/icon.png'
}

jar {
    manifest {
        attributes('Main-Class': application.mainClass)
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}